@*
https://github.com/mwinkler/Blazor.Components/blob/master/LICENSE
*@

@using Microsoft.AspNetCore.Components.Web
@using MW.Blazor
@using AasCore.Aas3_0_RC02

@typeparam TNode
@*@using static AdminShellNS.AdminShellV20;*@
@using static TreePage

<div class="uic-tree @(Visible ? "" : "uic-tree--hidden")">
    @foreach (var node in Nodes ?? Enumerable.Empty<TNode>())
    {
        var nodeExpanded = ExpandedNodes.Contains(node);
        var nodeSelected = node.Equals(SelectedNode);
        var hasChilds = HasChildNodes(node);
        var isAas = (node as Item).Tag is AssetAdministrationShell;
		var isSubmodel = (node as Item).Tag is Submodel;
		var color = "";
		
		if (isAas)
		{
			color = "#88A6D2";
		}
		else if (isSubmodel)
		{
			color = "#CBD8EB";
		}
		else
		{
			color = "#F4F4F5";
		}
        // @("nodeExpanded " + nodeExpanded + " nodeSelected " + nodeSelected + " hasChilds " + hasChilds)

        <div>
            @if (hasChilds)
            {
                string iconId = "";
                if (AasxServer.Program.htmlId)
                    iconId = HtmlId(node as Item) + "._icon";
                <span class="uic-tree__icon" @onclick="@(() => OnToggleNode(node, !nodeExpanded))" id="@iconId">
                    <i class="@(nodeExpanded ? Style.CollapseNodeIconClass : Style.ExpandNodeIconClass)"></i>
                </span>
            }

            <div class="flex space-x-8 flex-col mb-1 pr-4 ml-4 cursor-pointer @(nodeSelected ? "border-2 border-[#D42044]" : "") bg-[@(color)]" @onclick="@(() => OnSelectNode(node))">
                    <div class="flex flex-row">
                @{
                    string titleId = "";
                    if (AasxServer.Program.htmlId)
                        titleId = HtmlId(node as Item) + "._title";
                        <div class="inline @Style.NodeTitleClass" @onclick="@(() => OnSelectNode(node))" id="@titleId">
                        @TitleTemplate(node) @{ /* @(" " + node.GetHashCode() + " ") */ }
                    </div>
                    }
                </div>
            </div>

            @if (hasChilds)
            {
                if (nodeExpanded)
                {
                    <Tree Nodes="ChildSelector(node)"
                          TitleTemplate="TitleTemplate"
                          ChildSelector="ChildSelector"
                          ExpandedNodes="ExpandedNodes"
                          ExpandedNodesChanged="ExpandedNodesChanged"
                          SelectedNode="SelectedNode"
                          SelectedNodeChanged="SelectedNodeChanged"
                          Visible="nodeExpanded"
                          HasChildNodes="HasChildNodes"
                          HtmlId="HtmlId" />
                }
            }

        </div>
    }

</div>

@code {

    [Parameter] public IEnumerable<TNode> Nodes { get; set; }

    [Parameter] public RenderFragment<TNode> TitleTemplate { get; set; }

    [Parameter] public TNode SelectedNode { get; set; }
    [Parameter] public EventCallback<TNode> SelectedNodeChanged { get; set; }

    [Parameter] public Func<TNode, IEnumerable<TNode>> ChildSelector { get; set; }

    [Parameter] public IList<TNode> ExpandedNodes { get; set; } = new List<TNode>();
    [Parameter] public EventCallback<IList<TNode>> ExpandedNodesChanged { get; set; }

    [Parameter] public TreeStyle Style { get; set; } = TreeStyle.Bootstrap;

    [Parameter] public bool Visible { get; set; } = true;

    [Parameter] public Func<TNode, bool> HasChildNodes { get; set; } = node => true;

    [Parameter] public Func<Item, string> HtmlId { get; set; } = node => "";

    private void OnToggleNode(TNode node, bool expand)
    {
        var expanded = ExpandedNodes.Contains(node);

        if (expanded && !expand)
        {
            ExpandedNodes.Remove(node);
            ExpandedNodesChanged.InvokeAsync(ExpandedNodes);
        }
        else if (!expanded && expand)
        {
            ExpandedNodes.Add(node);
            ExpandedNodesChanged.InvokeAsync(ExpandedNodes);
        }
    }

    private void OnSelectNode(TNode node)
    {
        SelectedNode = node;
        SelectedNodeChanged.InvokeAsync(node);
    }

}