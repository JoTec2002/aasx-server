@page "/"
@namespace AasxServerBlazor.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0" />
	<title>AasxServerBlazor</title>
	<base href="~/" />
	<link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
	<link rel="stylesheet" href="css/site.css" />
	<!--
	<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.8.1/css/all.css" integrity="sha384-50oBUHEmvpQ+1lW4y57PTFmhCaXp0ML5d60M1M7uH2+nqUivzIebhndOJK28anvf" crossorigin="anonymous">
	-->
	<link rel="stylesheet" href="css/all.css" />
	<link rel="stylesheet" href="css/treeStyles.css" />

	<script src="//code.jquery.com/jquery-2.1.3.min.js"></script>
	<link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/jqueryui/1.10.0/css/smoothness/jquery-ui-1.10.0.custom.min.css" />
	<script src="//cdnjs.cloudflare.com/ajax/libs/jqueryui/1.10.0/jquery-ui.js"></script>


	<script src="https://cdn.tailwindcss.com"></script>


	<script type="text/javascript">
		var interval = setInterval(cyclic, 1000);
		var counter = 0;
		function cyclic() {
			counter++;
		}
		function saveAsFile(filename, bytesBase64) {
			var len = bytesBase64.length;
			var link = document.createElement('a');
			link.download = filename;
			link.href = "data:application/pdf;base64," + bytesBase64;
			document.body.appendChild(link);
			link.click();
			document.body.removeChild(link);
		}
		function text_klick() {
			var playername = document.getElementById("tb_playername").value;
			location.href = 'http://localhost/RA/kick(Get_u).php?u=' + playername;
		}
	</script>
	<script>
		//download.js v4.2, by dandavis; 2008-2016. [CCBY2] see http://danml.com/download.html for tests/usage
		// v1 landed a FF+Chrome compat way of downloading strings to local un-named files, upgraded to use a hidden frame and optional mime
		// v2 added named files via a[download], msSaveBlob, IE (10+) support, and window.URL support for larger+faster saves than dataURLs
		// v3 added dataURL and Blob Input, bind-toggle arity, and legacy dataURL fallback was improved with force-download mime and base64 support. 3.1 improved safari handling.
		// v4 adds AMD/UMD, commonJS, and plain browser support
		// v4.1 adds url download capability via solo URL argument (same domain/CORS only)
		// v4.2 adds semantic variable names, long (over 2MB) dataURL support, and hidden by default temp anchors
		// https://github.com/rndme/download

		(function (root, factory) {
			if (typeof define === 'function' && define.amd) {
				// AMD. Register as an anonymous module.
				define([], factory);
			} else if (typeof exports === 'object') {
				// Node. Does not work with strict CommonJS, but
				// only CommonJS-like environments that support module.exports,
				// like Node.
				module.exports = factory();
			} else {
				// Browser globals (root is window)
				root.download = factory();
			}
		}(this, function () {

			return function download(data, strFileName, strMimeType) {

				var self = window, // this script is only for browsers anyway...
					defaultMime = "application/octet-stream", // this default mime also triggers iframe downloads
					mimeType = strMimeType || defaultMime,
					payload = data,
					url = !strFileName && !strMimeType && payload,
					anchor = document.createElement("a"),
					toString = function (a) { return String(a); },
					myBlob = (self.Blob || self.MozBlob || self.WebKitBlob || toString),
					fileName = strFileName || "download",
					blob,
					reader;
				myBlob = myBlob.call ? myBlob.bind(self) : Blob;

				if (String(this) === "true") { //reverse arguments, allowing download.bind(true, "text/xml", "export.xml") to act as a callback
					payload = [payload, mimeType];
					mimeType = payload[0];
					payload = payload[1];
				}


				if (url && url.length < 2048) { // if no filename and no mime, assume a url was passed as the only argument
					fileName = url.split("/").pop().split("?")[0];
					anchor.href = url; // assign href prop to temp anchor
					if (anchor.href.indexOf(url) !== -1) { // if the browser determines that it's a potentially valid url path:
						var ajax = new XMLHttpRequest();
						ajax.open("GET", url, true);
						ajax.responseType = 'blob';
						ajax.onload = function (e) {
							download(e.target.response, fileName, defaultMime);
						};
						setTimeout(function () { ajax.send(); }, 0); // allows setting custom ajax headers using the return:
						return ajax;
					} // end if valid url?
				} // end if url?


				//go ahead and download dataURLs right away
				if (/^data\:[\w+\-]+\/[\w+\-]+[,;]/.test(payload)) {

					if (payload.length > (1024 * 1024 * 1.999) && myBlob !== toString) {
						payload = dataUrlToBlob(payload);
						mimeType = payload.type || defaultMime;
					} else {
						return navigator.msSaveBlob ?  // IE10 can't do a[download], only Blobs:
							navigator.msSaveBlob(dataUrlToBlob(payload), fileName) :
							saver(payload); // everyone else can save dataURLs un-processed
					}

				}//end if dataURL passed?

				blob = payload instanceof myBlob ?
					payload :
					new myBlob([payload], { type: mimeType });


				function dataUrlToBlob(strUrl) {
					var parts = strUrl.split(/[:;,]/),
						type = parts[1],
						decoder = parts[2] == "base64" ? atob : decodeURIComponent,
						binData = decoder(parts.pop()),
						mx = binData.length,
						i = 0,
						uiArr = new Uint8Array(mx);

					for (i; i < mx; ++i) uiArr[i] = binData.charCodeAt(i);

					return new myBlob([uiArr], { type: type });
				}

				function saver(url, winMode) {

					if ('download' in anchor) { //html5 A[download]
						anchor.href = url;
						anchor.setAttribute("download", fileName);
						anchor.className = "download-js-link";
						anchor.innerHTML = "downloading...";
						anchor.style.display = "none";
						document.body.appendChild(anchor);
						setTimeout(function () {
							anchor.click();
							document.body.removeChild(anchor);
							if (winMode === true) { setTimeout(function () { self.URL.revokeObjectURL(anchor.href); }, 250); }
						}, 66);
						return true;
					}

					// handle non-a[download] safari as best we can:
					if (/(Version)\/(\d+)\.(\d+)(?:\.(\d+))?.*Safari\//.test(navigator.userAgent)) {
						url = url.replace(/^data:([\w\/\-\+]+)/, defaultMime);
						if (!window.open(url)) { // popup blocked, offer direct download:
							if (confirm("Displaying New Document\n\nUse Save As... to download, then click back to return to this page.")) { location.href = url; }
						}
						return true;
					}

					//do iframe dataURL download (old ch+FF):
					var f = document.createElement("iframe");
					document.body.appendChild(f);

					if (!winMode) { // force a mime that will download:
						url = "data:" + url.replace(/^data:([\w\/\-\+]+)/, defaultMime);
					}
					f.src = url;
					setTimeout(function () { document.body.removeChild(f); }, 333);

				}//end saver




				if (navigator.msSaveBlob) { // IE10+ : (has Blob, but not a[download] or URL)
					return navigator.msSaveBlob(blob, fileName);
				}

				if (self.URL) { // simple fast and modern way using Blob and URL:
					saver(self.URL.createObjectURL(blob), true);
				} else {
					// handle non-Blob()+non-URL browsers:
					if (typeof blob === "string" || blob.constructor === toString) {
						try {
							return saver("data:" + mimeType + ";base64," + self.btoa(blob));
						} catch (y) {
							return saver("data:" + mimeType + "," + encodeURIComponent(blob));
						}
					}

					// Blob but not URL support:
					reader = new FileReader();
					reader.onload = function (e) {
						saver(this.result);
					};
					reader.readAsDataURL(blob);
				}
				return true;
			}; /* end download() */
		}));
	</script>

	<script>
		// makes div resizable in x-direction
		window.resize = () => {
			const mobileModeWidth = 1000;
			const leftColumn = document.querySelector('.left-column');
			const rightColumn = document.querySelector('.right-column');
			const divider = document.querySelector('.divider');
			const container = document.querySelector("#container");
			let elements = document.querySelectorAll("#element");

			let mobileModeOn = false;
			let isResizing = false;
			let startCoordinate;
			let cursor = document.body.style.cursor;
			let userSelect = document.body.style.userSelect;
			divider.addEventListener('mousedown', (e) => {
				cursor = document.body.style.cursor;
				document.body.style.cursor = mobileModeOn ? 'n-resize' : 'e-resize';
				isResizing = true;
				startCoordinate = mobileModeOn ? e.clientY : e.clientX;
			
				elements.forEach(element => {
					element.className =
						element.className.replace
							(/(?:^|\s)cursor-pointer(?!\S)/g, '')
				});

				document.body.style.userSelect = "none";
			});

			document.addEventListener('mousemove', (e) => {
				if (!isResizing) return;
				const leftColumnWidth = leftColumn.getBoundingClientRect().width;
				const rightColumnWidth = rightColumn.getBoundingClientRect().width;
				const leftColumnHeight = leftColumn.getBoundingClientRect().height;
				const rightColumnHeight = rightColumn.getBoundingClientRect().height;

				const leftBorder = leftColumn.getBoundingClientRect().left + 0.25 * window.innerWidth;
				const rightBorder = rightColumn.getBoundingClientRect().right - 0.25 * window.innerWidth;
				const topBorder = window.innerHeight;
				const bottomBorder = 0;
				let distance;
				let mouseCoordinate = (mobileModeOn ? e.clientY : e.clientX);
				let upperBound = !mobileModeOn ? rightBorder : topBorder;
				let lowerBound = !mobileModeOn ? leftBorder : bottomBorder;

				if (mouseCoordinate < lowerBound) {
					distance = lowerBound - startCoordinate;
				} else if (mouseCoordinate > upperBound) {
					distance = upperBound - startCoordinate;
				} else {
					distance = mouseCoordinate - startCoordinate;
				}

				if (mobileModeOn)
				{
					leftColumn.style.height = `${leftColumnHeight + distance}px`;
				}
				else
				{
					leftColumn.style.width = `${leftColumnWidth + distance}px`;
					rightColumn.style.width = `${rightColumnWidth - distance}px`;
				}
				

				if (mouseCoordinate < lowerBound) {
					startCoordinate = lowerBound;
				} else if (mouseCoordinate > upperBound) {
					startCoordinate = upperBound;
				} else {
					startCoordinate = mouseCoordinate;
				}
			});

			document.addEventListener('mouseup', () => {
				document.body.style.cursor = "auto";
				isResizing = false;
				elements.forEach(element => {
					console.log(element.className)
					element.className += " cursor-pointer";

				});
				document.body.style.userSelect = userSelect;
			});
			



			var windowWidth = window.innerWidth;
			if(windowWidth < mobileModeWidth)
			{
				onWindowResize();
			}

			function onWindowResize() {
				var windowWidth = window.innerWidth;
			
				if (!mobileModeOn)
				{
					leftColumn.style.width = `${parseInt(windowWidth * 0.3)}px`;
					if (rightColumn.style.right >= windowWidth)
					{
						rightColumn.style.width = `${parseInt(windowWidth * 0.6)}px`;
					}
				}

				if (windowWidth < mobileModeWidth && !mobileModeOn)
				{
					
					container.style.flexDirection = "column";
					leftColumn.style.width = "100%";
					rightColumn.style.width = "100%";
					divider.style.width = "100%";
					divider.style.height = "10px";
					divider.style.cursor = "n-resize"
					leftColumn.style.overflowY = "scroll";
					mobileModeOn = true;
					
				}
				else if (windowWidth >= mobileModeWidth && mobileModeOn)
				{
					container.style.flexDirection = "row";
					leftColumn.style.width = `${parseInt(windowWidth * 0.3)}px`;
					leftColumn.style.height = null;
					leftColumn.style.overflowY = null;
					rightColumn.style.height = null;
					divider.style.width = "10px";
					divider.style.height = null;
					divider.style.cursor = "e-resize"
					mobileModeOn = false;
				}
			}
			


			window.onresize = onWindowResize;
		}
		

	</script>
	<script type="text/javascript">
		window.getDimensions = function () {
			return {
				width: window.innerWidth,
				height: window.innerHeight
			};
		};
	</script>
</head>
<body>
	<app>
		@(await Html.RenderComponentAsync<App>(RenderMode.ServerPrerendered))
	</app>

	<script src="_framework/blazor.server.js"></script>
</body>
</html>
